
Semaforo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b18  08000b18  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b18  08000b18  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b18  08000b18  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b18  08000b18  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b18  08000b18  00001b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b1c  08000b1c  00001b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000b20  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08000b2c  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000b2c  00002038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fc7  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b16  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  00004b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000247  00000000  00000000  00004e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157f2  00000000  00000000  00005097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c52  00000000  00000000  0001a889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b9f3  00000000  00000000  0001e4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099ece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000adc  00000000  00000000  00099f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0009a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000b00 	.word	0x08000b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000b00 	.word	0x08000b00

0800014c <main>:
void SystemClock_Config(void);  // Configura el reloj del sistema
static void MX_GPIO_Init(void); // Inicializa los pines de entrada/salida (GPIO)

/* Main program --------------------------------------------------------------*/
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    /* Inicializa los periféricos y el reloj del sistema */
    HAL_Init();
 8000152:	f000 f99f 	bl	8000494 <HAL_Init>
    SystemClock_Config();
 8000156:	f000 f8c7 	bl	80002e8 <SystemClock_Config>
    MX_GPIO_Init();
 800015a:	f000 f8cb 	bl	80002f4 <MX_GPIO_Init>

    /* Estado inicial: luz verde encendida, luz roja apagada */
    HAL_GPIO_WritePin(GPIOB, LED_2, GPIO_PIN_RESET);   // Enciende la luz verde (LED_2)
 800015e:	2200      	movs	r2, #0
 8000160:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000164:	4859      	ldr	r0, [pc, #356]	@ (80002cc <main+0x180>)
 8000166:	f000 fc76 	bl	8000a56 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, LED_1, GPIO_PIN_SET);     // Apaga la luz roja (LED_1)
 800016a:	2201      	movs	r2, #1
 800016c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000170:	4857      	ldr	r0, [pc, #348]	@ (80002d0 <main+0x184>)
 8000172:	f000 fc70 	bl	8000a56 <HAL_GPIO_WritePin>

    while (1)  // Bucle infinito para el funcionamiento del semáforo
    {
        uint32_t current_time = HAL_GetTick();  // Obtiene el tiempo actual en milisegundos
 8000176:	f000 f9e5 	bl	8000544 <HAL_GetTick>
 800017a:	6078      	str	r0, [r7, #4]

        // Revisa si alguno de los botones SW_1 o SW_2 fue presionado y la luz verde está encendida
        if ((HAL_GPIO_ReadPin(GPIOB, SW_1) == GPIO_PIN_SET || HAL_GPIO_ReadPin(GPIOB, SW_2) == GPIO_PIN_SET) && state == 0)
 800017c:	2120      	movs	r1, #32
 800017e:	4853      	ldr	r0, [pc, #332]	@ (80002cc <main+0x180>)
 8000180:	f000 fc52 	bl	8000a28 <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	2b01      	cmp	r3, #1
 8000188:	d006      	beq.n	8000198 <main+0x4c>
 800018a:	2140      	movs	r1, #64	@ 0x40
 800018c:	484f      	ldr	r0, [pc, #316]	@ (80002cc <main+0x180>)
 800018e:	f000 fc4b 	bl	8000a28 <HAL_GPIO_ReadPin>
 8000192:	4603      	mov	r3, r0
 8000194:	2b01      	cmp	r3, #1
 8000196:	d106      	bne.n	80001a6 <main+0x5a>
 8000198:	4b4e      	ldr	r3, [pc, #312]	@ (80002d4 <main+0x188>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d102      	bne.n	80001a6 <main+0x5a>
        {
            // Solo aceptamos la solicitud si la luz verde está encendida (estado 0)
            request_crossing = 1;  // Se marca la solicitud de cruce
 80001a0:	4b4d      	ldr	r3, [pc, #308]	@ (80002d8 <main+0x18c>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
        }

        // Control del semáforo basado en el estado actual
        switch (state)
 80001a6:	4b4b      	ldr	r3, [pc, #300]	@ (80002d4 <main+0x188>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	2b03      	cmp	r3, #3
 80001ac:	d8e3      	bhi.n	8000176 <main+0x2a>
 80001ae:	a201      	add	r2, pc, #4	@ (adr r2, 80001b4 <main+0x68>)
 80001b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b4:	080001c5 	.word	0x080001c5
 80001b8:	080001e7 	.word	0x080001e7
 80001bc:	08000243 	.word	0x08000243
 80001c0:	08000267 	.word	0x08000267
        {
            case 0: // Estado 0: luz verde encendida
                if (request_crossing)
 80001c4:	4b44      	ldr	r3, [pc, #272]	@ (80002d8 <main+0x18c>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d077      	beq.n	80002bc <main+0x170>
                {
                    request_crossing = 0;   // Resetea la solicitud de cruce
 80001cc:	4b42      	ldr	r3, [pc, #264]	@ (80002d8 <main+0x18c>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	701a      	strb	r2, [r3, #0]
                    state = 1;              // Cambia al estado de parpadeo verde
 80001d2:	4b40      	ldr	r3, [pc, #256]	@ (80002d4 <main+0x188>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
                    last_blink_time = current_time; // Guarda el tiempo actual
 80001d8:	4a40      	ldr	r2, [pc, #256]	@ (80002dc <main+0x190>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	6013      	str	r3, [r2, #0]
                    blinking = 0;           // Reinicia el contador de parpadeos
 80001de:	4b40      	ldr	r3, [pc, #256]	@ (80002e0 <main+0x194>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]
                }
                break;
 80001e4:	e06a      	b.n	80002bc <main+0x170>

            case 1: // Estado 1: luz verde parpadeando
                if (current_time - last_blink_time >= 200)
 80001e6:	4b3d      	ldr	r3, [pc, #244]	@ (80002dc <main+0x190>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	1ad3      	subs	r3, r2, r3
 80001ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80001f0:	d966      	bls.n	80002c0 <main+0x174>
                {
                    // Cambia el estado del LED verde cada 200 ms (parpadeo)
                    HAL_GPIO_TogglePin(GPIOB, LED_2);
 80001f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001f6:	4835      	ldr	r0, [pc, #212]	@ (80002cc <main+0x180>)
 80001f8:	f000 fc45 	bl	8000a86 <HAL_GPIO_TogglePin>
                    last_blink_time = current_time; // Actualiza el tiempo del último parpadeo
 80001fc:	4a37      	ldr	r2, [pc, #220]	@ (80002dc <main+0x190>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	6013      	str	r3, [r2, #0]

                    // Después de 5 parpadeos (1 segundo), cambia al estado rojo
                    if (++blinking >= 5)
 8000202:	4b37      	ldr	r3, [pc, #220]	@ (80002e0 <main+0x194>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	3301      	adds	r3, #1
 8000208:	b2da      	uxtb	r2, r3
 800020a:	4b35      	ldr	r3, [pc, #212]	@ (80002e0 <main+0x194>)
 800020c:	701a      	strb	r2, [r3, #0]
 800020e:	4b34      	ldr	r3, [pc, #208]	@ (80002e0 <main+0x194>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	2b04      	cmp	r3, #4
 8000214:	d954      	bls.n	80002c0 <main+0x174>
                    {
                        blinking = 0; // Reinicia el contador de parpadeos
 8000216:	4b32      	ldr	r3, [pc, #200]	@ (80002e0 <main+0x194>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
                        state = 2;    // Cambia al estado rojo encendido
 800021c:	4b2d      	ldr	r3, [pc, #180]	@ (80002d4 <main+0x188>)
 800021e:	2202      	movs	r2, #2
 8000220:	701a      	strb	r2, [r3, #0]
                        HAL_GPIO_WritePin(GPIOB, LED_2, GPIO_PIN_SET);   // Apaga la luz verde
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000228:	4828      	ldr	r0, [pc, #160]	@ (80002cc <main+0x180>)
 800022a:	f000 fc14 	bl	8000a56 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOC, LED_1, GPIO_PIN_RESET); // Enciende la luz roja
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000234:	4826      	ldr	r0, [pc, #152]	@ (80002d0 <main+0x184>)
 8000236:	f000 fc0e 	bl	8000a56 <HAL_GPIO_WritePin>
                        last_state_change = current_time;  // Guarda el tiempo del cambio de estado
 800023a:	4a2a      	ldr	r2, [pc, #168]	@ (80002e4 <main+0x198>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	6013      	str	r3, [r2, #0]
                    }
                }
                break;
 8000240:	e03e      	b.n	80002c0 <main+0x174>

            case 2: // Estado 2: luz roja encendida
                if (current_time - last_state_change >= 3000)
 8000242:	4b28      	ldr	r3, [pc, #160]	@ (80002e4 <main+0x198>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	1ad3      	subs	r3, r2, r3
 800024a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800024e:	4293      	cmp	r3, r2
 8000250:	d938      	bls.n	80002c4 <main+0x178>
                {
                    // Después de 3 segundos en rojo, cambia a parpadeo rojo
                    state = 3;  // Cambia al estado de parpadeo rojo
 8000252:	4b20      	ldr	r3, [pc, #128]	@ (80002d4 <main+0x188>)
 8000254:	2203      	movs	r2, #3
 8000256:	701a      	strb	r2, [r3, #0]
                    last_blink_time = current_time; // Guarda el tiempo actual para el parpadeo
 8000258:	4a20      	ldr	r2, [pc, #128]	@ (80002dc <main+0x190>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6013      	str	r3, [r2, #0]
                    blinking = 0;  // Reinicia el contador de parpadeos
 800025e:	4b20      	ldr	r3, [pc, #128]	@ (80002e0 <main+0x194>)
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000264:	e02e      	b.n	80002c4 <main+0x178>

            case 3: // Estado 3: luz roja parpadeando
                if (current_time - last_blink_time >= 200)
 8000266:	4b1d      	ldr	r3, [pc, #116]	@ (80002dc <main+0x190>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	1ad3      	subs	r3, r2, r3
 800026e:	2bc7      	cmp	r3, #199	@ 0xc7
 8000270:	d92a      	bls.n	80002c8 <main+0x17c>
                {
                    // Cambia el estado del LED rojo cada 200 ms (parpadeo)
                    HAL_GPIO_TogglePin(GPIOC, LED_1);
 8000272:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000276:	4816      	ldr	r0, [pc, #88]	@ (80002d0 <main+0x184>)
 8000278:	f000 fc05 	bl	8000a86 <HAL_GPIO_TogglePin>
                    last_blink_time = current_time; // Actualiza el tiempo del último parpadeo
 800027c:	4a17      	ldr	r2, [pc, #92]	@ (80002dc <main+0x190>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6013      	str	r3, [r2, #0]

                    // Después de 5 parpadeos (1 segundo), vuelve al estado verde
                    if (++blinking >= 5)
 8000282:	4b17      	ldr	r3, [pc, #92]	@ (80002e0 <main+0x194>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	3301      	adds	r3, #1
 8000288:	b2da      	uxtb	r2, r3
 800028a:	4b15      	ldr	r3, [pc, #84]	@ (80002e0 <main+0x194>)
 800028c:	701a      	strb	r2, [r3, #0]
 800028e:	4b14      	ldr	r3, [pc, #80]	@ (80002e0 <main+0x194>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b04      	cmp	r3, #4
 8000294:	d918      	bls.n	80002c8 <main+0x17c>
                    {
                        blinking = 0; // Reinicia el contador de parpadeos
 8000296:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <main+0x194>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
                        state = 0;   // Cambia al estado verde encendido
 800029c:	4b0d      	ldr	r3, [pc, #52]	@ (80002d4 <main+0x188>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
                        HAL_GPIO_WritePin(GPIOC, LED_1, GPIO_PIN_SET);   // Apaga la luz roja
 80002a2:	2201      	movs	r2, #1
 80002a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a8:	4809      	ldr	r0, [pc, #36]	@ (80002d0 <main+0x184>)
 80002aa:	f000 fbd4 	bl	8000a56 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOB, LED_2, GPIO_PIN_RESET); // Enciende la luz verde
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002b4:	4805      	ldr	r0, [pc, #20]	@ (80002cc <main+0x180>)
 80002b6:	f000 fbce 	bl	8000a56 <HAL_GPIO_WritePin>
                    }
                }
                break;
 80002ba:	e005      	b.n	80002c8 <main+0x17c>
                break;
 80002bc:	bf00      	nop
 80002be:	e75a      	b.n	8000176 <main+0x2a>
                break;
 80002c0:	bf00      	nop
 80002c2:	e758      	b.n	8000176 <main+0x2a>
                break;
 80002c4:	bf00      	nop
 80002c6:	e756      	b.n	8000176 <main+0x2a>
                break;
 80002c8:	bf00      	nop
 80002ca:	e754      	b.n	8000176 <main+0x2a>
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	40011000 	.word	0x40011000
 80002d4:	20000031 	.word	0x20000031
 80002d8:	20000032 	.word	0x20000032
 80002dc:	20000028 	.word	0x20000028
 80002e0:	20000030 	.word	0x20000030
 80002e4:	2000002c 	.word	0x2000002c

080002e8 <SystemClock_Config>:
/**
  * @brief Configuración del reloj del sistema
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    // Configuración del reloj del sistema (ajustar según el microcontrolador)
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <MX_GPIO_Init>:
  * @brief Inicialización de los pines de entrada/salida (GPIO)
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]

    /* Habilita los puertos GPIOB y GPIOC */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000308:	4b22      	ldr	r3, [pc, #136]	@ (8000394 <MX_GPIO_Init+0xa0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a21      	ldr	r2, [pc, #132]	@ (8000394 <MX_GPIO_Init+0xa0>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b1f      	ldr	r3, [pc, #124]	@ (8000394 <MX_GPIO_Init+0xa0>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0308 	and.w	r3, r3, #8
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000320:	4b1c      	ldr	r3, [pc, #112]	@ (8000394 <MX_GPIO_Init+0xa0>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a1b      	ldr	r2, [pc, #108]	@ (8000394 <MX_GPIO_Init+0xa0>)
 8000326:	f043 0310 	orr.w	r3, r3, #16
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b19      	ldr	r3, [pc, #100]	@ (8000394 <MX_GPIO_Init+0xa0>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0310 	and.w	r3, r3, #16
 8000334:	603b      	str	r3, [r7, #0]
 8000336:	683b      	ldr	r3, [r7, #0]

    /* Configura los pines SW_1 y SW_2 como entrada (botones) */
    GPIO_InitStruct.Pin = SW_1 | SW_2;
 8000338:	2360      	movs	r3, #96	@ 0x60
 800033a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;  // Configura con resistencia de pull-down
 8000340:	2302      	movs	r3, #2
 8000342:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000344:	f107 0308 	add.w	r3, r7, #8
 8000348:	4619      	mov	r1, r3
 800034a:	4813      	ldr	r0, [pc, #76]	@ (8000398 <MX_GPIO_Init+0xa4>)
 800034c:	f000 f9e8 	bl	8000720 <HAL_GPIO_Init>

    /* Configura el pin de la luz roja (LED_1) como salida */
    GPIO_InitStruct.Pin = LED_1;
 8000350:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000354:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Salida push-pull
 8000356:	2301      	movs	r3, #1
 8000358:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;         // Sin resistencia pull-up/pull-down
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Baja frecuencia para ahorro de energía
 800035e:	2302      	movs	r3, #2
 8000360:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000362:	f107 0308 	add.w	r3, r7, #8
 8000366:	4619      	mov	r1, r3
 8000368:	480c      	ldr	r0, [pc, #48]	@ (800039c <MX_GPIO_Init+0xa8>)
 800036a:	f000 f9d9 	bl	8000720 <HAL_GPIO_Init>

    /* Configura el pin de la luz verde (LED_2) como salida */
    GPIO_InitStruct.Pin = LED_2;
 800036e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000372:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Salida push-pull
 8000374:	2301      	movs	r3, #1
 8000376:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;         // Sin resistencia pull-up/pull-down
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Baja frecuencia para ahorro de energía
 800037c:	2302      	movs	r3, #2
 800037e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	4619      	mov	r1, r3
 8000386:	4804      	ldr	r0, [pc, #16]	@ (8000398 <MX_GPIO_Init+0xa4>)
 8000388:	f000 f9ca 	bl	8000720 <HAL_GPIO_Init>
}
 800038c:	bf00      	nop
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40021000 	.word	0x40021000
 8000398:	40010c00 	.word	0x40010c00
 800039c:	40011000 	.word	0x40011000

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <HAL_MspInit+0x40>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a0d      	ldr	r2, [pc, #52]	@ (80003e0 <HAL_MspInit+0x40>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <HAL_MspInit+0x40>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <HAL_MspInit+0x40>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	4a07      	ldr	r2, [pc, #28]	@ (80003e0 <HAL_MspInit+0x40>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c8:	61d3      	str	r3, [r2, #28]
 80003ca:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <HAL_MspInit+0x40>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <NMI_Handler+0x4>

080003ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <HardFault_Handler+0x4>

080003f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <MemManage_Handler+0x4>

080003fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <UsageFault_Handler+0x4>

0800040c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000434:	f000 f874 	bl	8000520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000448:	f7ff fff8 	bl	800043c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480b      	ldr	r0, [pc, #44]	@ (800047c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800044e:	490c      	ldr	r1, [pc, #48]	@ (8000480 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000450:	4a0c      	ldr	r2, [pc, #48]	@ (8000484 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a09      	ldr	r2, [pc, #36]	@ (8000488 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000464:	4c09      	ldr	r4, [pc, #36]	@ (800048c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000472:	f000 fb21 	bl	8000ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f7ff fe69 	bl	800014c <main>
  bx lr
 800047a:	4770      	bx	lr
  ldr r0, =_sdata
 800047c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000480:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000484:	08000b20 	.word	0x08000b20
  ldr r2, =_sbss
 8000488:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800048c:	20000038 	.word	0x20000038

08000490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000490:	e7fe      	b.n	8000490 <ADC1_2_IRQHandler>
	...

08000494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000498:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <HAL_Init+0x28>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a07      	ldr	r2, [pc, #28]	@ (80004bc <HAL_Init+0x28>)
 800049e:	f043 0310 	orr.w	r3, r3, #16
 80004a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a4:	2003      	movs	r0, #3
 80004a6:	f000 f907 	bl	80006b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004aa:	200f      	movs	r0, #15
 80004ac:	f000 f808 	bl	80004c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b0:	f7ff ff76 	bl	80003a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004b4:	2300      	movs	r3, #0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40022000 	.word	0x40022000

080004c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c8:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <HAL_InitTick+0x54>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <HAL_InitTick+0x58>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80004da:	fbb2 f3f3 	udiv	r3, r2, r3
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f911 	bl	8000706 <HAL_SYSTICK_Config>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ea:	2301      	movs	r3, #1
 80004ec:	e00e      	b.n	800050c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b0f      	cmp	r3, #15
 80004f2:	d80a      	bhi.n	800050a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f4:	2200      	movs	r2, #0
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	f000 f8e7 	bl	80006ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000500:	4a06      	ldr	r2, [pc, #24]	@ (800051c <HAL_InitTick+0x5c>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	e000      	b.n	800050c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000000 	.word	0x20000000
 8000518:	20000008 	.word	0x20000008
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000524:	4b05      	ldr	r3, [pc, #20]	@ (800053c <HAL_IncTick+0x1c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <HAL_IncTick+0x20>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4413      	add	r3, r2
 8000530:	4a03      	ldr	r2, [pc, #12]	@ (8000540 <HAL_IncTick+0x20>)
 8000532:	6013      	str	r3, [r2, #0]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	20000008 	.word	0x20000008
 8000540:	20000034 	.word	0x20000034

08000544 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  return uwTick;
 8000548:	4b02      	ldr	r3, [pc, #8]	@ (8000554 <HAL_GetTick+0x10>)
 800054a:	681b      	ldr	r3, [r3, #0]
}
 800054c:	4618      	mov	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	20000034 	.word	0x20000034

08000558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058a:	4a04      	ldr	r2, [pc, #16]	@ (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	60d3      	str	r3, [r2, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b04      	ldr	r3, [pc, #16]	@ (80005b8 <__NVIC_GetPriorityGrouping+0x18>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	0a1b      	lsrs	r3, r3, #8
 80005aa:	f003 0307 	and.w	r3, r3, #7
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db0a      	blt.n	80005e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	490c      	ldr	r1, [pc, #48]	@ (8000608 <__NVIC_SetPriority+0x4c>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	0112      	lsls	r2, r2, #4
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	440b      	add	r3, r1
 80005e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e4:	e00a      	b.n	80005fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4908      	ldr	r1, [pc, #32]	@ (800060c <__NVIC_SetPriority+0x50>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	3b04      	subs	r3, #4
 80005f4:	0112      	lsls	r2, r2, #4
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	440b      	add	r3, r1
 80005fa:	761a      	strb	r2, [r3, #24]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000610:	b480      	push	{r7}
 8000612:	b089      	sub	sp, #36	@ 0x24
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	f1c3 0307 	rsb	r3, r3, #7
 800062a:	2b04      	cmp	r3, #4
 800062c:	bf28      	it	cs
 800062e:	2304      	movcs	r3, #4
 8000630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	3304      	adds	r3, #4
 8000636:	2b06      	cmp	r3, #6
 8000638:	d902      	bls.n	8000640 <NVIC_EncodePriority+0x30>
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3b03      	subs	r3, #3
 800063e:	e000      	b.n	8000642 <NVIC_EncodePriority+0x32>
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	f04f 32ff 	mov.w	r2, #4294967295
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	43da      	mvns	r2, r3
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	401a      	ands	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000658:	f04f 31ff 	mov.w	r1, #4294967295
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43d9      	mvns	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	4313      	orrs	r3, r2
         );
}
 800066a:	4618      	mov	r0, r3
 800066c:	3724      	adds	r7, #36	@ 0x24
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3b01      	subs	r3, #1
 8000680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000684:	d301      	bcc.n	800068a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000686:	2301      	movs	r3, #1
 8000688:	e00f      	b.n	80006aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <SysTick_Config+0x40>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000692:	210f      	movs	r1, #15
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f7ff ff90 	bl	80005bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <SysTick_Config+0x40>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a2:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <SysTick_Config+0x40>)
 80006a4:	2207      	movs	r2, #7
 80006a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	e000e010 	.word	0xe000e010

080006b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff49 	bl	8000558 <__NVIC_SetPriorityGrouping>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e0:	f7ff ff5e 	bl	80005a0 <__NVIC_GetPriorityGrouping>
 80006e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	68b9      	ldr	r1, [r7, #8]
 80006ea:	6978      	ldr	r0, [r7, #20]
 80006ec:	f7ff ff90 	bl	8000610 <NVIC_EncodePriority>
 80006f0:	4602      	mov	r2, r0
 80006f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff5f 	bl	80005bc <__NVIC_SetPriority>
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ffb0 	bl	8000674 <SysTick_Config>
 8000714:	4603      	mov	r3, r0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000720:	b480      	push	{r7}
 8000722:	b08b      	sub	sp, #44	@ 0x2c
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000732:	e169      	b.n	8000a08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000734:	2201      	movs	r2, #1
 8000736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	69fa      	ldr	r2, [r7, #28]
 8000744:	4013      	ands	r3, r2
 8000746:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000748:	69ba      	ldr	r2, [r7, #24]
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	429a      	cmp	r2, r3
 800074e:	f040 8158 	bne.w	8000a02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	4a9a      	ldr	r2, [pc, #616]	@ (80009c0 <HAL_GPIO_Init+0x2a0>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d05e      	beq.n	800081a <HAL_GPIO_Init+0xfa>
 800075c:	4a98      	ldr	r2, [pc, #608]	@ (80009c0 <HAL_GPIO_Init+0x2a0>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d875      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 8000762:	4a98      	ldr	r2, [pc, #608]	@ (80009c4 <HAL_GPIO_Init+0x2a4>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d058      	beq.n	800081a <HAL_GPIO_Init+0xfa>
 8000768:	4a96      	ldr	r2, [pc, #600]	@ (80009c4 <HAL_GPIO_Init+0x2a4>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d86f      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 800076e:	4a96      	ldr	r2, [pc, #600]	@ (80009c8 <HAL_GPIO_Init+0x2a8>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d052      	beq.n	800081a <HAL_GPIO_Init+0xfa>
 8000774:	4a94      	ldr	r2, [pc, #592]	@ (80009c8 <HAL_GPIO_Init+0x2a8>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d869      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 800077a:	4a94      	ldr	r2, [pc, #592]	@ (80009cc <HAL_GPIO_Init+0x2ac>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d04c      	beq.n	800081a <HAL_GPIO_Init+0xfa>
 8000780:	4a92      	ldr	r2, [pc, #584]	@ (80009cc <HAL_GPIO_Init+0x2ac>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d863      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 8000786:	4a92      	ldr	r2, [pc, #584]	@ (80009d0 <HAL_GPIO_Init+0x2b0>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d046      	beq.n	800081a <HAL_GPIO_Init+0xfa>
 800078c:	4a90      	ldr	r2, [pc, #576]	@ (80009d0 <HAL_GPIO_Init+0x2b0>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d85d      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 8000792:	2b12      	cmp	r3, #18
 8000794:	d82a      	bhi.n	80007ec <HAL_GPIO_Init+0xcc>
 8000796:	2b12      	cmp	r3, #18
 8000798:	d859      	bhi.n	800084e <HAL_GPIO_Init+0x12e>
 800079a:	a201      	add	r2, pc, #4	@ (adr r2, 80007a0 <HAL_GPIO_Init+0x80>)
 800079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a0:	0800081b 	.word	0x0800081b
 80007a4:	080007f5 	.word	0x080007f5
 80007a8:	08000807 	.word	0x08000807
 80007ac:	08000849 	.word	0x08000849
 80007b0:	0800084f 	.word	0x0800084f
 80007b4:	0800084f 	.word	0x0800084f
 80007b8:	0800084f 	.word	0x0800084f
 80007bc:	0800084f 	.word	0x0800084f
 80007c0:	0800084f 	.word	0x0800084f
 80007c4:	0800084f 	.word	0x0800084f
 80007c8:	0800084f 	.word	0x0800084f
 80007cc:	0800084f 	.word	0x0800084f
 80007d0:	0800084f 	.word	0x0800084f
 80007d4:	0800084f 	.word	0x0800084f
 80007d8:	0800084f 	.word	0x0800084f
 80007dc:	0800084f 	.word	0x0800084f
 80007e0:	0800084f 	.word	0x0800084f
 80007e4:	080007fd 	.word	0x080007fd
 80007e8:	08000811 	.word	0x08000811
 80007ec:	4a79      	ldr	r2, [pc, #484]	@ (80009d4 <HAL_GPIO_Init+0x2b4>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d013      	beq.n	800081a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007f2:	e02c      	b.n	800084e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	623b      	str	r3, [r7, #32]
          break;
 80007fa:	e029      	b.n	8000850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	3304      	adds	r3, #4
 8000802:	623b      	str	r3, [r7, #32]
          break;
 8000804:	e024      	b.n	8000850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	3308      	adds	r3, #8
 800080c:	623b      	str	r3, [r7, #32]
          break;
 800080e:	e01f      	b.n	8000850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	330c      	adds	r3, #12
 8000816:	623b      	str	r3, [r7, #32]
          break;
 8000818:	e01a      	b.n	8000850 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000822:	2304      	movs	r3, #4
 8000824:	623b      	str	r3, [r7, #32]
          break;
 8000826:	e013      	b.n	8000850 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d105      	bne.n	800083c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000830:	2308      	movs	r3, #8
 8000832:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	69fa      	ldr	r2, [r7, #28]
 8000838:	611a      	str	r2, [r3, #16]
          break;
 800083a:	e009      	b.n	8000850 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800083c:	2308      	movs	r3, #8
 800083e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	69fa      	ldr	r2, [r7, #28]
 8000844:	615a      	str	r2, [r3, #20]
          break;
 8000846:	e003      	b.n	8000850 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
          break;
 800084c:	e000      	b.n	8000850 <HAL_GPIO_Init+0x130>
          break;
 800084e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	2bff      	cmp	r3, #255	@ 0xff
 8000854:	d801      	bhi.n	800085a <HAL_GPIO_Init+0x13a>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	e001      	b.n	800085e <HAL_GPIO_Init+0x13e>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3304      	adds	r3, #4
 800085e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	2bff      	cmp	r3, #255	@ 0xff
 8000864:	d802      	bhi.n	800086c <HAL_GPIO_Init+0x14c>
 8000866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	e002      	b.n	8000872 <HAL_GPIO_Init+0x152>
 800086c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086e:	3b08      	subs	r3, #8
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	210f      	movs	r1, #15
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	401a      	ands	r2, r3
 8000884:	6a39      	ldr	r1, [r7, #32]
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	431a      	orrs	r2, r3
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	2b00      	cmp	r3, #0
 800089c:	f000 80b1 	beq.w	8000a02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008a0:	4b4d      	ldr	r3, [pc, #308]	@ (80009d8 <HAL_GPIO_Init+0x2b8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a4c      	ldr	r2, [pc, #304]	@ (80009d8 <HAL_GPIO_Init+0x2b8>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b4a      	ldr	r3, [pc, #296]	@ (80009d8 <HAL_GPIO_Init+0x2b8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008b8:	4a48      	ldr	r2, [pc, #288]	@ (80009dc <HAL_GPIO_Init+0x2bc>)
 80008ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008bc:	089b      	lsrs	r3, r3, #2
 80008be:	3302      	adds	r3, #2
 80008c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	220f      	movs	r2, #15
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a40      	ldr	r2, [pc, #256]	@ (80009e0 <HAL_GPIO_Init+0x2c0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d013      	beq.n	800090c <HAL_GPIO_Init+0x1ec>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a3f      	ldr	r2, [pc, #252]	@ (80009e4 <HAL_GPIO_Init+0x2c4>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d00d      	beq.n	8000908 <HAL_GPIO_Init+0x1e8>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a3e      	ldr	r2, [pc, #248]	@ (80009e8 <HAL_GPIO_Init+0x2c8>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d007      	beq.n	8000904 <HAL_GPIO_Init+0x1e4>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a3d      	ldr	r2, [pc, #244]	@ (80009ec <HAL_GPIO_Init+0x2cc>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d101      	bne.n	8000900 <HAL_GPIO_Init+0x1e0>
 80008fc:	2303      	movs	r3, #3
 80008fe:	e006      	b.n	800090e <HAL_GPIO_Init+0x1ee>
 8000900:	2304      	movs	r3, #4
 8000902:	e004      	b.n	800090e <HAL_GPIO_Init+0x1ee>
 8000904:	2302      	movs	r3, #2
 8000906:	e002      	b.n	800090e <HAL_GPIO_Init+0x1ee>
 8000908:	2301      	movs	r3, #1
 800090a:	e000      	b.n	800090e <HAL_GPIO_Init+0x1ee>
 800090c:	2300      	movs	r3, #0
 800090e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000910:	f002 0203 	and.w	r2, r2, #3
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	4093      	lsls	r3, r2
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	4313      	orrs	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800091e:	492f      	ldr	r1, [pc, #188]	@ (80009dc <HAL_GPIO_Init+0x2bc>)
 8000920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	3302      	adds	r3, #2
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000938:	4b2d      	ldr	r3, [pc, #180]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	492c      	ldr	r1, [pc, #176]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	4313      	orrs	r3, r2
 8000942:	608b      	str	r3, [r1, #8]
 8000944:	e006      	b.n	8000954 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	43db      	mvns	r3, r3
 800094e:	4928      	ldr	r1, [pc, #160]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000950:	4013      	ands	r3, r2
 8000952:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d006      	beq.n	800096e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000960:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000962:	68da      	ldr	r2, [r3, #12]
 8000964:	4922      	ldr	r1, [pc, #136]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	60cb      	str	r3, [r1, #12]
 800096c:	e006      	b.n	800097c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800096e:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000970:	68da      	ldr	r2, [r3, #12]
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	43db      	mvns	r3, r3
 8000976:	491e      	ldr	r1, [pc, #120]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000978:	4013      	ands	r3, r2
 800097a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d006      	beq.n	8000996 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	4918      	ldr	r1, [pc, #96]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	604b      	str	r3, [r1, #4]
 8000994:	e006      	b.n	80009a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000996:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	43db      	mvns	r3, r3
 800099e:	4914      	ldr	r1, [pc, #80]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 80009a0:	4013      	ands	r3, r2
 80009a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d021      	beq.n	80009f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	490e      	ldr	r1, [pc, #56]	@ (80009f0 <HAL_GPIO_Init+0x2d0>)
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	600b      	str	r3, [r1, #0]
 80009bc:	e021      	b.n	8000a02 <HAL_GPIO_Init+0x2e2>
 80009be:	bf00      	nop
 80009c0:	10320000 	.word	0x10320000
 80009c4:	10310000 	.word	0x10310000
 80009c8:	10220000 	.word	0x10220000
 80009cc:	10210000 	.word	0x10210000
 80009d0:	10120000 	.word	0x10120000
 80009d4:	10110000 	.word	0x10110000
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40010000 	.word	0x40010000
 80009e0:	40010800 	.word	0x40010800
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	40011000 	.word	0x40011000
 80009ec:	40011400 	.word	0x40011400
 80009f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <HAL_GPIO_Init+0x304>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	4909      	ldr	r1, [pc, #36]	@ (8000a24 <HAL_GPIO_Init+0x304>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a04:	3301      	adds	r3, #1
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f47f ae8e 	bne.w	8000734 <HAL_GPIO_Init+0x14>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	372c      	adds	r7, #44	@ 0x2c
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40010400 	.word	0x40010400

08000a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e001      	b.n	8000a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	807b      	strh	r3, [r7, #2]
 8000a62:	4613      	mov	r3, r2
 8000a64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a66:	787b      	ldrb	r3, [r7, #1]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a6c:	887a      	ldrh	r2, [r7, #2]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a72:	e003      	b.n	8000a7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	041a      	lsls	r2, r3, #16
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	611a      	str	r2, [r3, #16]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b085      	sub	sp, #20
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a98:	887a      	ldrh	r2, [r7, #2]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	041a      	lsls	r2, r3, #16
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	887b      	ldrh	r3, [r7, #2]
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	611a      	str	r2, [r3, #16]
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	2600      	movs	r6, #0
 8000abc:	4d0c      	ldr	r5, [pc, #48]	@ (8000af0 <__libc_init_array+0x38>)
 8000abe:	4c0d      	ldr	r4, [pc, #52]	@ (8000af4 <__libc_init_array+0x3c>)
 8000ac0:	1b64      	subs	r4, r4, r5
 8000ac2:	10a4      	asrs	r4, r4, #2
 8000ac4:	42a6      	cmp	r6, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	f000 f81a 	bl	8000b00 <_init>
 8000acc:	2600      	movs	r6, #0
 8000ace:	4d0a      	ldr	r5, [pc, #40]	@ (8000af8 <__libc_init_array+0x40>)
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8000afc <__libc_init_array+0x44>)
 8000ad2:	1b64      	subs	r4, r4, r5
 8000ad4:	10a4      	asrs	r4, r4, #2
 8000ad6:	42a6      	cmp	r6, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae0:	4798      	blx	r3
 8000ae2:	3601      	adds	r6, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aea:	4798      	blx	r3
 8000aec:	3601      	adds	r6, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08000b18 	.word	0x08000b18
 8000af4:	08000b18 	.word	0x08000b18
 8000af8:	08000b18 	.word	0x08000b18
 8000afc:	08000b1c 	.word	0x08000b1c

08000b00 <_init>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr

08000b0c <_fini>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	bf00      	nop
 8000b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b12:	bc08      	pop	{r3}
 8000b14:	469e      	mov	lr, r3
 8000b16:	4770      	bx	lr
